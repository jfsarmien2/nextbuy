// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String
  slug        String      @unique
  Category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  inventory   Int         @default(0)
  cartItems   CartItem[]
  OrderItem   OrderItem[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  products Product[]
}

model Cart {
  id         String     @id @default(cuid())
  items      CartItem[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model CartItem {
  id         String   @id @default(cuid())
  cart       Cart     @relation(fields: [cartId], references: [id])
  cartId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id                    String      @id @default(cuid())
  total                 Float
  items                 OrderItem[]
  stripeSessionId       String?
  stripePaymentIntentId String?
  status                String      @default("pending")
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  userId                String?
  user                  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int      @default(1)
  price      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      String   @default("user") // e.g., "user", "admin"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}
